// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: query.sql

package storage

import (
	"context"
)

const createProfile = `-- name: CreateProfile :exec
INSERT INTO profiles (id, username, password, type) 
VALUES ( ?, ?, ?, ? )
`

type CreateProfileParams struct {
	ID       int64
	Username string
	Password string
	Type     int64
}

func (q *Queries) CreateProfile(ctx context.Context, arg CreateProfileParams) error {
	_, err := q.db.ExecContext(ctx, createProfile,
		arg.ID,
		arg.Username,
		arg.Password,
		arg.Type,
	)
	return err
}

const getProfiles = `-- name: GetProfiles :many
SELECT id, username FROM profiles
`

type GetProfilesRow struct {
	ID       int64
	Username string
}

func (q *Queries) GetProfiles(ctx context.Context) ([]GetProfilesRow, error) {
	rows, err := q.db.QueryContext(ctx, getProfiles)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetProfilesRow
	for rows.Next() {
		var i GetProfilesRow
		if err := rows.Scan(&i.ID, &i.Username); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const isFinishedSetup = `-- name: IsFinishedSetup :one
SELECT count(*) FROM profiles
`

func (q *Queries) IsFinishedSetup(ctx context.Context) (int64, error) {
	row := q.db.QueryRowContext(ctx, isFinishedSetup)
	var count int64
	err := row.Scan(&count)
	return count, err
}
